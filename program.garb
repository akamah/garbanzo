# keyが，単なるsymbolを認識するように変更
# {"@": "print", "value": /parser/exprtab}

tmp = {"@": "datastore", "object": {"@": "choice", "children": {}}};
tmp/children/string = parser/string;
tmp/children/symbol = parser/symbol;
parser/key = tmp;

/parser/key/children/integer = /parser/integer;

##### 主にデータストア関連の命令のラッパー関数
set = fun(obj, k, v)
  {@: "set", object: obj, key: k, value: v}
end;

get = fun(obj, k)
  {@: "get", object: obj, key: k}
end;

size = fun(obj)
  {@: "size", object: obj}
end;

remove = fun(obj, k)
  {@: "remove", obect: obj, key: k}
end;

exist = fun(obj, k)
  {@: "exist", object: obj, key: k}
end;

getprevkey = fun(obj, orig)
  {@: "getprevkey", object: obj, origin: orig}
end;

getnextkey = fun(obj, orig)
  {@: "getnextkey", object: obj, origin: orig}
end;

firstkey = fun(obj)
  {@: "firstkey", object: obj}
end;

lastkey = fun(obj)
  {@: "lastkey", object: obj}
end;

isdatastore = fun(value)
  {@: "isdatastore", value: value}
end;

# おなじみのprint関数
print = fun(message)
  {"@": "print", "value": message}
end;

exprprec = fun(prec)
  {@: "precrule", table: ../parser/exprtab, prec: prec}
end;

tokenize = fun(parser)
  block
    %/parser/whitespaces;
    result = %$parser;
    %/parser/whitespaces;
    result;
  end;
end;

terminal = fun(string)
  block
    {@: "terminal", string: $string}
  end;
end;

a = 3;
foo = block
  a = 2;
  block
    a = 1;
    /print(a);
    /print($a);
    /print($$a);
  end;
end;

bar = block
  a = 6;
  /print($a);
end;

a = 4;
%bar;

binaryoperator = fun(name, op, prec, pleft, pright)
  {@: "set", object: /parser/exprtab, key: name, value:
   {prec: prec,
    parser: block
      left = /exprprec($pleft);
      %/tokenize(/terminal($op));
      right = /exprprec($pright);
      {@: "datastore", object: {@: $name, left: left, right: right}}
    end}}
end;

rightassoc = fun(name, op, prec)
  /binaryoperator(name, op, prec, {@: "sub", left: prec, right: 1}, prec);
end;

nonassoc = fun(name, op, prec)
  p = {@: "sub", left: prec, right: 1};
  /binaryoperator(name, op, prec, p, p);
end;


print("hoge");

# 二項演算子の定義
rightassoc("or",  "||", 250);
rightassoc("and", "&&", 200);

nonassoc("equal", "==", 150);
nonassoc("notequal", "!=", 150);
nonassoc("lessthan", "<", 150);

rightassoc("add", "+", 100);
rightassoc("sub", "-", 100);
rightassoc("mult", "*", 90);
rightassoc("div", "%", 90);
rightassoc("mod", "|", 90);


# print(isdatastore(1245));
# print(isdatastore("hoge"));
# print(isdatastore({}));

print(3 < 4 * 8 && 5 | 2 == 0 || 4 != 3);
print(true && true);

# whileのテスト
a = 1;
while a<10
  print(a);
  a = a + 1;
end

# ifのテスト
if a<10
  print("a != 10");
else
  print("a == 10");
end

# 関数のテスト
hoge = fun()
  {@: "print", value: "abc"}
  {@: "print", value: "def"}
end;

{@: "print", value: hoge()}


# fibonacci number
fib = fun(n)
  if n < 2
    n;
  else
    ../fib(n - 1) + ../fib(n - 2);
  end
end;


{@: "print", value: fib(7)}


#funca = function(arguments)
#funca(argumentb)

#@@func(arg)(arg2)

#hoge.1
#3,0


#c = 30
#(list '+ 'b c 'd)

#=> (+ b 30 d)

#{@: datastore, object: {@: hoge, b: poyo, c: foo, d: bar} }

#=> {@: hoge, ... d: bar}


### データストアを操作する関数群
empty = fun()
  {@: "datastore", object: {}}
end;

each = fun(store, f)
  if /size(store) == 0
    store;
  else
    key = /firstkey(store);
    last = /lastkey(store);

    while key != last
      f(key, /get(store, key));
      key = /getnextkey(store, key);
    end

    f(last, /get(store, last));
    store;
  end
end;

map = fun(f, store)
  r = /empty();
  "mapping";
  /each(store, fun(key, value)
    /set(../r, key, ../f(value));
  end);

  r;
end;

a = {a: 1, b: 2, c: 3};

/print(/map(fun(v) v + 1; end, a));

### パターンマッチ式の構文拡張用記法

# シンボルのパターン
sympat = block
  s = %/parser/symbol;
  %/terminal("@");
end;

# define 

/print("defined sympat one");

parser/sympat = block
  s = %/parser/symbol;
  %/terminal(":");
  d = %/parser/integer;
  %/parser/whitespaces;

  fun(obj)
    e = /exprprec(../d);
    %/parser/whitespaces;
    /set(obj, ../s, e);
  end;
end;

# 文字列パターン
parser/strpat = block
  s = %/parser/string;
  %/parser/whitespaces;

  fun(obj)
    %/tokenize(/terminal(../s));
  end;
end;

parser/patternlist = block
  {@: "many", parser: block
    {@: "choice", children:
      {str: %/parser/strpat,
       sym: %/parser/sympat}}
  end}
end;


parser/patternmatch = block
  %/tokenize(/terminal("let"));
  %/tokenize(/terminal(":"));
  d = %/tokenize(/parser/integer);

  xs = %/parser/patternlist;
  %/tokenize(/terminal(":="));

  body = %/parser/expression;
  %/tokenize(/terminal(";"));

  
  psr = block
    vars = /empty();
    /each($xs, fun(k, f)
      f(../vars);
    end);

    quote
      /each($vars, fun(k, v)
        /set(.., k, v);
      end);

      ${@: "quote", value: $body};
    end;
  end;

  key = /size(/parser/exprtab);

  entry = {prec: d, parser: psr};
  /set(/parser/exprtab, key, entry);

  true;
end;


/parser/sentence/children/patternmatch = /parser/patternmatch;

let:0 "(" inner:1000 ")" := inner;
let:15 store:14 "[" key:1000 "]" := /get(store, key);

let:20 "'" val:20 := {@: "quote", value: val};

/print(3 * (4 + 2));
/print((5 + 8) * 2);

x = {0: 10, 1: 100, 2: 200};

/print(x[1]);
/print('hoge);

/print((12345 % 100) | 10);