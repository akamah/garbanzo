#{
grammar.rules[:sentence].children << Rule::many_one(Rule::whitespace).map { "\n".to_repr }
#}
#{
grammar.rules[:eof] = Rule::not(Rule::any)
grammar.rules[:comment] = "#".to_rule >> Rule::many(Rule::not("\n") >> Rule::any) >> ("\n".to_rule | :eof)
grammar.rules[:sentence].children << Rule::call(:comment)
#}
# Garbanzo predefined grammar set v.2
# 2016/02/29 akamah
#

# 最初に，バージョン1に対する構文定義が続く．
#
# 数値を定義 (1428)
#{
grammar.rules[:number] = Rule::many_one(Rule::one_of("0123456789")).map {|as|
  as.map(&:value).join.to_i.to_repr
}.token

# 識別子を定義 (hoge, poyo)
grammar.rules[:identifier] = Rule::many_one(Rule::one_of("@abcdefghijklmnopqrstuvwxyz.")).map {|as|
  as.map(&:value).join.to_repr
}.token
#}

# 文字列を定義 ("string")
#{
grammar.rules[:string] = ["\"", Rule::many(!"\"".to_rule >> Rule::any), Rule::token("\"")].sequence {|_, cs, _|
  cs.map(&:value).join.to_repr
}.token
#}

# print文 (print 3)
#{
grammar.rules[:sentence].children << ["print", Rule::many_one(Rule::whitespace), :expression].sequence { |_, _, n|
  Repr::print(n)
}
#}

# pathとは、a/b/cのように、オブジェクトのキーを指定するもの。
#{
grammar.rules[:path] = [:identifier, Rule::many(Rule::string("/") >> :identifier)].sequence { |a, idents|
  [a] + idents
}
#}

# $path という記法で、親を辿れるようにする
#{
grammar.rules[:path] = grammar.rules[:path] | ["$", :path].sequence { |_, idents|
  ["..".to_repr] + idents
}
#}

# 変数はパスで表される
#{
grammar.rules[:variable]  = :path.to_rule.map {|idents|
  idents.reduce(Repr::getenv) { |body, key|
    Repr::get(body, key)
  }
} | ["/", :path].sequence {|_, idents|
  idents.reduce(Repr::get(Repr::getenv, '/'.to_repr)) { |body, key|
    Repr::get(body, key)
  }
}
#}


# 原始式は、数値か文字列か変数のいずれかである
#{
grammar.rules[:primitive] = [:number, :string, :variable].choice
#}

# おっと忘れてた、ストアオブジェクトも原始式
#{
grammar.rules[:pair] = [:identifier, Rule::token(":"), :expression].sequence { |id, _, expr|
  [id, expr]
}

grammar.rules[:primitive].children <<
  [Rule::token("["), Rule::separate_by(:pair, Rule::token(",")), Rule::token("]")].sequence { |_, lst, _|
    Repr::store(lst.to_h)
  }
#}

# 関数呼び出しは、原始式にカッコを後置したもの, func(expr)
#{
grammar.rules[:call] = [:primitive, Rule::token("("), :expression, Rule::token(")")].sequence {|func, _, arg, _|
    Repr::call(func, arg)
} | :primitive
#}


# termは、関数呼び出しとパスでのアクセスを加えたもの
#{
grammar.rules[:term] = 
  [:call, Rule::optional(Rule::string("/") >> :path, [])].sequence { |a, idents|
  idents.reduce(a) { |body, key|
    Repr::get(body, key)
  }
}
#}

# かけ算は、termをくっつけたもの
#{
grammar.rules[:multiplication] = 
  [:term, Rule::many(Rule::string('*').token >> :term)].sequence { |num, mults|
  mults.reduce(num) { |expr, adder|
    Repr::mult(expr, adder)
  }
}
#}

# 足し算は、multiplication二つをプラスでくっつけたもの。
#{
grammar.rules[:addition] = 
  [:multiplication, Rule::many(Rule::string('+').token >> :multiplication)].sequence { |num, adds|
  adds.reduce(num) { |expr, adder|
    Repr::add(expr, adder)
  }
}
#}

# 関数は、いまのところ^{ <sentence> }と書く
#{
grammar.rules[:function] =
  [Rule::token("^{"), Rule::many(:sentence), Rule::token("}")].sequence {|_, body, _|
    a = Repr::lambda(Repr::getenv, Repr::begin(Lib::make_list(*body)))
    a    
  }
#}

#{
grammar.rules[:expression] = [:addition, :function].choice
#}

#{
grammar.rules[:condition] = :expression.to_rule
#}



# 代入構文
#{
grammar.rules[:sentence].children <<
  [:expression, Rule::token("="), :expression].sequence {|object, _, expr|
  Repr::set(object['object'], object['key'], expr)
}
#}

# 繰り返しのwhileループ
#{
grammar.rules[:sentence].children << [Rule::token("while"), :condition, :sentence].sequence {|_, cond, body|
  Repr::while(cond, body)
}
#}

# if文
#{
grammar.rules[:sentence].children << [Rule::token('if'), :expression,
				     :sentence,
				     Rule::token('else'),
				     :sentence].sequence { |_, cond, csq, _, alt|
  Repr::if(cond, csq, alt)				     
}
#}

# スコープの導入。これは、空の引数を取る関数を呼び出すこととする。
#{
grammar.rules[:sentence].children << [Rule::token("{"), Rule::many(:sentence), Rule::token("}")].sequence { |_, lst, _|
  Repr::scope(Lib::make_list(*lst))
}
#}
#  Repr::call(Repr::lambda(Repr::getenv, body), Repr::Store.new({}))


# 式の末尾にセミコロンをつけると文になるやつ
#{
grammar.rules[:sentence].children << [:expression, Rule::token(";")].sequence {|e, _| e}
#}  

#{
grammar.rules[:expression].children << ["'".to_rule, :sentence].sequence {|_, s|
  Repr::quote(s)
}
#}

#{
grammar.rules[:expression].children << ["%".to_rule, :expression].sequence {|_, s|
  Repr::eval(Repr::getenv, s)
}
#}





# 改行 ################################################
newline = '/parser/sentence/children/newline = '{
  [@: "terminal", string:"
"];
}

setnewline = '/parser/newline = /parser/sentence/children/newline

print newline
print setnewline

# 一行コメント
comment = '/parser/comment = '{
  [@: "terminal", string: "#"];
  [@: "many", parser: [@: "quote", value: [@: "noneof", string: "
"]]];
  "";
}

setcomment = '/parser/sentence/children/comment = /parser/comment

print comment
print setcomment

# シンボル ################################################
symbol = 'parser/symbol = '{
    oo = [@: "quote", value: [@: "oneof", string: ".@abcdefghijklmnopqrstuvwxyz"]]
    %/parser/whitespaces;
    result  = %oo
    cs = [@: "many", parser: oo]
    %/parser/whitespaces;

    /foreach([store: cs, func: ^{
      ../result = [@: "append", left: ../result, right: value]
    }]);

    result;
}

print symbol


# 整数 ################################################
integer = '/parser/integer = '{
    digit = [@: "quote", value: [@: "oneof", string: "0123456789"]]
    a = [@: "sub", left: [@: "tocode", string: %digit], right: [@: "tocode", string: "0"]]
    rest = [@: "many", parser: digit]
    ten = [@: "sub", left: [@: "tocode", string: "K"], right: [@: "tocode", string: "A"]]
    
    "generate";
    /foreach([store: rest, func: ^{
      n = [@: "sub", left: [@: "tocode", string: value], right: [@: "tocode", string: "0"]]
      ../a = ../a * ../ten + n
    }]);

    a;
}

setinteger = '/parser/expression/children/integer = /parser/integer

print integer
print setinteger

# 真偽値 ################################################
true = '/parser/true = '{
    [@: "terminal", string: "true"];
    [@: "equal", left: "", right: ""];
}

false = '/parser/false = '{
    [@: "terminal", string: "false"];
    [@: "equal", left: "", right: "a"];
}

print true
print false

# ユーティリティ #########################################
# manytill: あるパーサendが成功するまで，pの結果を順々に追加してゆく．

manytillbase = '/manytillbase = ^{
  %end;
  result;
}

manytillrec = '/manytillrec = ^{
  x = %p
  [@: "set", object: result, key: i, value: x];

  [@: "choice", children:
    [end: /manytillbase([end: end, result: result]),
     next: /manytillrec([p: p, end: end, i: i+1, result: result])]];
}

manytill = '/manytill = ^{
  result = [@: "datastore", object: []]
  [@: "choice", children:
    [end:  /manytillbase([end: end, result: result]),
     next: /manytillrec([p: p, end: end, i: 0, result: result])]];
}

print manytillbase
print manytillrec
print manytill

manytilltest = '/manytilltest = '{
  /manytill([p: /parser/string, end: /parser/integer]);
}

print manytilltest

## 複数の文
somesentences = '/parser/somesentences = ^{
    endp = [@: "datastore", object: [@: "terminal", string: end]]
    sts = /manytill([p: '{
      %/parser/whitespaces;
      s = %/parser/sentence
      %/parser/whitespaces;
      s;
    }, end: endp])
    
    %/parser/whitespaces;

    sts;
}

print somesentences


# ブロック (begin) #######################################
block = '/parser/block = '{
    [@: "terminal", string: "begin"];
    sentences = /parser/somesentences([end: "end"])
    result = [@: "datastore", object: [@: "begin", body: sentences]]

    result;
}

setblock = '/parser/sentence/children/block = /parser/block

print block
print setblock

# 関数 ##############################################
function = '/parser/function = '{
    [@: "terminal", string: "fun"];
    %/parser/whitespaces;
    [@: "terminal", string: "("];
    %/parser/whitespaces;
    
    args = /sepby([parser: /parser/symbol, sep: '{
      %/parser/whitespaces;
      [@: "terminal", string: ","];
      %/parser/whitespaces;
    }])
    [@: "terminal", string: ")"];
    
    sts = /parser/somesentences([end: "end"])

    setargs = []

    "loop";
    /foreach([store: args, func: ^{
      [@: "set", object: ../setargs, key: key, value:
        [@: "datastore", object:
	  [@: "set", object: '[@: "getenv"];, key: value, value:
	    [@: "datastore", object:
	      [@: "get", object: [@: "quote", value: [@: "getenv"]], key: key]]]]];
    }]);

    body = [@: "datastore", object:
              [@: "begin", body:
	        [setargs: [@: "datastore", object: [@: "begin", body: setargs]],
		 thebody: [@: "datastore", object: [@: "begin", body: sts]]]]]

    x = [@: "datastore", object: [@: "lambda", env: [@: "quote", value: [@: "getenv"]], body: body]]
    x;
}

setfunction = '/parser/expression/children/function = /parser/function
print function

# パス ################################################
path = 'parser/path = '{
    p = %/parser/symbol
    ps = [@: "many", parser: '{
        [@: "terminal", string: "/"];
        %/parser/symbol;
    }]

    result = []
    result/head = p

    "hoge";

    /foreach([store: ps, func: ^{
      [@: "set", object: ../result, key: key, value: value];
    }]);

    result;
}

print path

# ルートから始まるパス ############
rootpath = 'parser/rootpath = '{
    [@: "terminal", string: "/"];

    rest = [@: "choice", children: [
             path: %/parser/path,
	     none: []]]

    result = []
    result/root = "/"

    "loop";

    /foreach([store: rest, func: ^{
      [@: "set", object: ../result, key: key, value: value];
    }]);
    result;
}

print rootpath

# 変数 ################################################
variable = '/parser/variable = '{
    [@: "terminal", string: ""];
    name = [@: "choice", children: [
             path: %/parser/path,
	     root: %/parser/rootpath]]
    result = [@: "datastore", object: [@: "getenv"]]
    "hoge";
   
    /foreach([store: name, func: ^{
        ../result = [@: "datastore", object: [@: "get", object: ../result, key: value]]
    }]);

    result;
}

print variable

# 代入 ###############################################
assign = '/parser/assign = '{
    ws = /parser/whitespaces
    path = %/parser/variable
    %ws;
    [@: "terminal", string: "="];
    %ws;
    rhe = %/parser/expression

    path/@ = "set"
    path/value = rhe

    path;
}

setassign = '/parser/sentence/children/assign = /parser/assign

print assign
print setassign

loop = '/parser/while = '{
    [@: "terminal", string: "while"];
    %/parser/whitespaces;
    cond = %/parser/expression
    sts = /parser/somesentences([end: "end"])
    body = [@: "datastore", object: [@: "begin", body: sts]]

    result = [@: "datastore", object: [@: "while", condition: cond, body: body]]

    result;
}

setloop = '[@: "insertprev", object: /parser/sentence/children,
            origin: [@: "firstkey", object: /parser/sentence/children],
	    key: "while", value: /parser/while];

print loop
print setloop


branch = '/parser/if = '{
    [@: "terminal", string: "if"];
    %/parser/whitespaces;
    cond = %/parser/expression

    csq = /parser/somesentences([end: "else"])

    alt = /parser/somesentences([end: "end"])

    c = [@: "datastore", object: [@: "begin", body: csq]]
    a = [@: "datastore", object: [@: "begin", body: alt]]
    
    result = [@: "datastore", object: [@: "if", condition: cond, consequence: c, alternative: a]]
    result;
}

setbranch = '[@: "insertprev", object: /parser/sentence/children,
            origin: [@: "firstkey", object: /parser/sentence/children],
	    key: "if", value: /parser/if];

print branch
print setbranch

# sepby: あるパーサに区切られたパーサを複数読み込む．
# parser = "hoge", sep = ","なら，
# "" (空白)
# "hoge"
# "hoge,hoge"
# ...
# にマッチする．
# Haskellのパーサコンビネータにインスパイアされた

sepbyone = '/sepbyone = ^{
  head = %parser
  tail = [@: "many", parser: '{
    %../sep;
    %../parser;
  }]

  result = []
  [@: "set", object: result, key: 0, value: head];

  i = 1
  "loop";
  /foreach([store: tail, func: ^{
    [@: "set", object: ../result, key: ../i, value: value];
    ../i = [@: "add", left: ../i, right: 1]
  }]);

  result;
}

sepby = '/sepby = ^{
  [@: "choice", children:
    [more: /sepbyone([parser: parser, sep: sep]),
     zero: []]];
}

print sepbyone
print sepby






### 呼び出し #####################
call = '/parser/call = '{
  [@: "terminal", string: "!"];
  f = %/parser/expression

  [@: "terminal", string: "("];
  args = /sepby([parser: /parser/expression, sep: '{
    %/parser/whitespaces;
    [@: "terminal", string: ","];
    %/parser/whitespaces;
  }])

  [@: "terminal", string: ")"];

  [@: "datastore", object: [@: "call", func: f, args: args]];
}

print call



### 優先順位付きexpression  ###############
exprtab = '/parser/exprtab = [@: "datastore", object: []]
print exprtab


numrule = '/parser/exprtab/numrule =
  [prec: 0,
   parser: /parser/integer]

print numrule

callrule = '/parser/exprtab/callrule =
  [prec: 30,
   parser: '{
     f = [@: "precrule", table: /parser/exprtab, prec: 29]
     [@: "terminal", string: "("];
     args = /sepby([parser: /parser/expression, sep: '{
       %/parser/whitespaces;
       [@: "terminal", string: ","];
       %/parser/whitespaces;
     }])

     [@: "terminal", string: ")"];
     [@: "datastore", object: [@: "call", func: f, args: args]];
   }]

print callrule

truerule = '/parser/exprtab/truerule =
  [prec: 20,
   parser: /parser/true]
   
falserule = '/parser/exprtab/falserule =
  [prec: 20,
   parser: /parser/false]
   
print truerule
print falserule

varrule = '/parser/exprtab/varrule =
  [prec: 10,
   parser: /parser/variable]

print varrule

funrule = '/parser/exprtab/funrule =
  [prec: 20,
   parser: /parser/function]

print funrule

evalrule = '/parser/exprtab/evalrule =
  [prec: 40,
   parser: '{
     [@: "terminal", string: "%"];
     expr = [@: "precrule", table: /parser/exprtab, prec: 40]
     
     [@: "datastore", object: [@: "eval", env: [@: "quote", value: [@: "getenv"]], program: expr]];
  }]
  
print evalrule


stringrule = '/parser/exprtab/stringrule =
  [prec: 0,
   parser: /parser/string]

print stringrule

datastorerule = '/parser/exprtab/datastorerule =
  [prec: 0,
   parser: /parser/datastore]

print datastorerule

# 設定する
newexpr = '/parser/newexpr = '{
  [@: "withcache", table: /parser/exprtab];
}
print newexpr

setnewexpr = '[@: "insertprev", object: /parser/expression/children,
          origin: [@: "firstkey", object: /parser/expression/children],
	  key: "newexpr", value: /parser/newexpr];
print setnewexpr

# 不要なルールを削除
deleteint = '[@: "remove", object: /parser/expression/children, key: "integer"];
deleteds = '[@: "remove", object: /parser/expression/children, key: "datastore"];
deletestr = '[@: "remove", object: /parser/expression/children, key: "string"];

print deleteint
print deleteds
print deletestr


# ここで，<式> ; という記法を文とみなすこととする．
exprsentence = '/parser/exprsentence = '{
  e = %/parser/expression
  [@: "terminal", string: ";"];
  e;
}

setexprsentence = '/parser/sentence/children/exprsentence = /parser/exprsentence

print exprsentence
print setexprsentence

### QUASIQUOTE ##################


# 準クオート #####################################
quasiquote = '/parser/quasiquote = '{
    [@: "terminal", string: "block"];
    quoted = /parser/somesentences([end: "end"])

    body = [@: "datastore", object: [@: "scope", body: quoted]]
    result = [@: "datastore", object: [@: "quasiquote", value: body]]
    
    result;
}

print quasiquote

quasiquoterule = '/parser/exprtab/quasiquote =
  [prec: 20,
   parser: /parser/quasiquote]

print quasiquoterule

unquoterule = '/parser/exprtab/unquote =
  [prec: 40,
   parser: '{
    [@: "terminal", string: "$"];
     expr = [@: "precrule", table: /parser/exprtab, prec: 40]
     
     [@: "datastore", object: [@: "unquote", value: expr]];
  }] 

print unquoterule

