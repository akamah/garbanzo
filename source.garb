%{
grammar.rules[:whitespace] = ["\n", " "].choice;
grammar.rules[:sentence].children << Rule::Call.new(:whitespace);
%}

%{
grammar.rules[:number] = Rule::Function.new {|s|
  if md = s.match(/^\d+/)
    num = Repr::Num.new(md[0].to_i)
    [num, s[md.end(0)..-1]]
  else
    raise Rules::ParseError, "expected number"
  end
}
%}

%{
grammar.rules[:sentence].children << ["print", "(", :expression, ")"].sequence { |_, _, n, _|
  Repr::Print.new(n)
}
%}

%{
grammar.rules[:expression] = [
  [:number, :expression_tail].sequence { |num, tail|
    Repr::Add.new(num, tail)		       
  }
].choice

grammar.rules[:expression_tail] = [
  ["+", :expression, :expression_tail].sequence {|_, e, t|
    Repr::Add.new(e, t)
  },
  [""].sequence {|_| Repr::Num.new(0)}
].choice
%}

print(42+31)
