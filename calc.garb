#{
grammar.rules[:sentence].children << Rule::whitespace
#}
#{
grammar.rules[:comment] = "#".to_rule >> Rule::many(Rule::not("\n".to_rule) >> Rule::any) >> "\n".to_rule
grammar.rules[:sentence].children << Rule::call(:comment)
#}
# コメントを実装したぞ！

# 数値を定義
#{
grammar.rules[:number] = Rule::many_one(Rule::one_of("0123456789")).map {|as|
  as.map(&:value).join.to_i.to_repr
}
# 識別子を定義する
grammar.rules[:identifier] = Rule::many_one(Rule::one_of("abcdefghijklmnopqrstuvwxyz.")).map {|as|
  as.map(&:value).join.to_repr
}
#}

# 文字列を定義
#{
grammar.rules[:string] = ["\"", Rule::many(!"\"".to_rule >> Rule::any), "\""].sequence {|_, cs, _|
  cs.map(&:value).join.to_repr
}  
#}
# print文
#{
grammar.rules[:sentence].children << ["print", " ", :expression].sequence { |_, _, n|
  Repr::print(n)
}
#}

# pathとは、a/b/cのように、オブジェクトのキーを指定するもの。
#{
grammar.rules[:path] = [:identifier, Rule::many(Rule::string("/") >> :identifier)].sequence { |a, idents|
  [a] + idents
} | ["$", :path].sequence { |_, idents|
  ["..".to_repr] + idents
}
#}

# 変数はパスで表される
#{
grammar.rules[:variable]  = [:path].sequence {|idents|
  idents.reduce(Repr::getenv) { |body, key|
    Repr::get(body, key)
  }
}
#}

# 原始式は、数値か文字列か変数のいずれかである
#{
grammar.rules[:primitive] = [:number, :string, :variable].choice
#}

# おっと忘れてた、空のストアオブジェクトも原始式
#{
grammar.rules[:primitive].children <<
  "[]".to_rule.map { Repr::Store.new({}) }
#}

# 関数呼び出しは、原始式にカッコを加えたもの。
#{
grammar.rules[:call] = [:primitive, "(", :expression, ")"].sequence {|func, _, arg, _|
  Repr::call(func, arg)
} | :primitive
#}


# termは、関数呼び出しとパスでのアクセスを加えたもの
#{
grammar.rules[:term] = 
  [:call, Rule::optional(Rule::string("/") >> :path, [])].sequence { |a, idents|
  idents.reduce(a) { |body, key|
    Repr::get(body, key)
  }
}
#}

# 足し算は、term二つをプラスでくっつけたもの。
#{
grammar.rules[:addition] = 
  [:term, Rule::many(Rule::string('+') >> :term)].sequence { |num, adds|
  adds.reduce(num) { |expr, adder|
    Repr::add(expr, adder)
  }
}
#}

#{
grammar.rules[:function] =
  ["^{", :sentence, "}"].sequence {|_, body, _|
    Repr::lambda(Repr::getenv, body)
  }
#}

#{
grammar.rules[:expression] = [:addition, :function].choice
#}

#{
grammar.rules[:condition] = [[:expression, "==", :expression].sequence {|l, _, r|
                               Repr::equal(l, r)
                             }, [:expression, "!=", :expression].sequence {|l, _, r|
                               Repr::notequal(l, r)
                             }].choice
#}

#{
grammar.rules[:sentence].children <<
  [:expression, "=", :expression].sequence {|object, _, expr|
  Repr::set(object['object'], object['key'], expr)
}
#}

#{
grammar.rules[:sentence].children << ["while", Rule::whitespaces, :condition, Rule::whitespaces, :sentence].sequence {|_, _, cond, _, body|
  Repr::while(cond, body)
}
#}

#{
grammar.rules[:sentence].children << ['if', Rule::whitespaces, :condition, Rule::whitespaces,
				     :sentence, Rule::whitespaces,
				     'else', Rule::whitespaces,
				     :sentence].sequence { |_, _, cond, _, csq, _, _, _, alt, _|
  Repr::if(cond, csq, alt)				     
}
#}

# スコープの導入。これは、空の引数を取る関数を呼び出すこととする。
#{
grammar.rules[:sentence].children << ["{", Rule::many(:sentence.to_rule), "}"].sequence { |_, lst, _|
  body = Repr::begin(Lib::make_list(*lst))
  Repr::call(Repr::lambda(Repr::getenv, body), Repr::Store.new({}))
}
#}

#{
grammar.rules[:sentence].children << [:expression, ";"].sequence {|e, _| e}
#}  

i=0
a=0
b=1

while i!=10 {
  $i=$i+1
  tmp=$b
  $b=$a+$b
  $a=tmp
  print $a
}

i=0
sum=0
while i!=10 {
  $i=$i+1
  j=0
  while j!=10 {
    $j=$j+1
    $$sum=$$sum+1
  }
}

if 1==2 {
  print 135
} else {
  print 246
}

print sum
store=[]
store/a=0
store/b=20
store/c=[]
store/d="hogehoge"
store/c/hoge=[]
print store

f=^{if a==10 {
      print 100
    } else {
      print $a
      e=[]
      e/a=$a+1
      $$f(e);
    }}
    
print f(store)
