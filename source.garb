#{
grammar.rules[:sentence].children << Rule::whitespaces
#}

#{
grammar.rules[:number] = Rule::many_one(Rule::one_of("0123456789")).map {|as|
  as.map(&:value).join.to_i.to_repr
}

grammar.rules[:identifier] = Rule::many_one(Rule::one_of("abcdefghijklmnopqrstuvwxyz")).map {|as|
  as.map(&:value).join.to_repr
}
#}

#{
grammar.rules[:sentence].children << ["print", "(", :expression, ")"].sequence { |_, _, n, _|
  Repr::Print.new(n)
}
#}
#{
grammar.rules[:variable] = [:identifier].sequence { |id|
  Repr::Get.new(Repr::Dot.new, id)
}
#}

#{
grammar.rules[:term] = [:number, :variable].choice
#}

#{
grammar.rules[:expression] = Rule::Choice.new(
  Rule::Bind.new(Rule::Call.new(:term)) { |n|
    expression_rest = lambda {|lefts|
      Rule::optional(Rule::Bind.new([Rule::String.new('+'),
	 	                     Rule::Call.new(:term)].sequence {|_, n| n }) { |n|
                       expression_rest.call(Repr::Add.new(lefts, n))
  	 	     }, lefts)

    }
    
    expression_rest.call(n)
  })
#}

#{
grammar.rules[:condition] = [[:expression, "==", :expression].sequence {|l, _, r|
                               Repr::Equal.new(l, r)
                             }, [:expression, "!=", :expression].sequence {|l, _, r|
                               Repr::NotEqual.new(l, r)
                             }].choice
#}

#{
grammar.rules[:sentence].children << [:identifier, "=", :expression].sequence { |id, _, x|
  Repr::Set.new(Repr::Dot.new, id, x)
}				
#}

#{
grammar.rules[:sentence].children << ["while", Rule::whitespaces, :condition, Rule::whitespaces, :sentence].sequence {|_, _, cond, _, body|
  Repr::While.new(cond, body)
}
#}

#{
grammar.rules[:sentence].children << ["{", Rule::many(Call.new(:sentence)), "}"].sequence { |_, lst, _|
  Repr::Begin.new(Lib::make_list(*lst))
}
#}

i=0
a=0
b=1

while i!=10 {
  i=i+1
  tmp=b
  b=a+b
  a=tmp
  print(a)
}

