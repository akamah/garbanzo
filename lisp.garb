#{
grammar.rules[:sentence].children << Rule::whitespace
#}
#{
grammar.rules[:comment] = [";", Rule::many(!"\n".to_rule >> Rule::any), "\n"].sequence
grammar.rules[:sentence].children << (Rule::call(:comment) >> Rule::success(true.to_repr))
#}

; Lisp風の言語を作成する。

; 数値を定義
#{
grammar.rules[:number] = Rule::many_one(Rule::one_of("0123456789")).map {|as|
  as.map(&:value).join.to_i.to_repr
}
#}

; 識別子を定義する
#{
grammar.rules[:symbol] = Rule::many_one(Rule::one_of("abcdefghijklmnopqrstuvwxyz.")).map {|as|
  as.map(&:value).join.to_repr
}
#}

; シンタックスシュガーを幾つか。
#{
grammar.rules[:quote] = ["'", :expression].sequence {|_, e|
  s = Repr::store({})
  s['@'] = 'quote'.to_repr
  s['value'] = e
  s
}
#}

; 変数へのアクセス
#{
grammar.rules[:getvar] = ['@', :symbol].sequence {|_, e|
  s = Repr::store({})
  s['@'] = 'get'.to_repr
  s['object'] = Repr::getenv
  s['key'] = e.to_repr
  s
}
#}

; 原始式を定義する
#{
grammar.rules[:atom] = [:number, :symbol].choice
#}

#{
def make_app_parser(name, cmd, *args, &f)
  [Rule::token('('.to_rule),
   Rule::token(name.to_rule),
   Rule::many(Rule::token(Rule::call(:expression))),
   Rule::token(')'.to_rule)].sequence {|_, _, exprs, _|
     exprs
  }.bind {|exprs|
     if f != nil
       Rule::success(f.call(exprs))
     elsif args.length == exprs.length
       h = Repr::store(args.map(&:to_repr).zip(exprs).to_h)
       h['@'.to_repr] = cmd.to_repr
       Rule::success(h)
     else
       Rule::fail("argument length mismatch")
     end
  }
end

def make_binary_parser(name, cmd)
  make_app_parser(name, cmd, 'left', 'right')
end

beginP = make_app_parser("begin", "begin") { |exprs|
  Repr::begin(Lib::make_list(*exprs))
}

grammar.rules[:application] = [
  make_binary_parser('+', 'add'),
  make_binary_parser(*%w(- sub)),
  make_binary_parser(*%w(* mult)),	
  make_binary_parser(*%w(/ div)),
  make_binary_parser(*%w(% mod)),
  make_binary_parser(*%w(= equal)),
  make_binary_parser(*%w(/= notequal)),
  make_binary_parser(*%w(< lessthan)),
  make_binary_parser(*%w(and and)),
  make_binary_parser(*%w(or  or)),
  make_app_parser(*%w(not not value)),
  make_app_parser(*%w(print print value)),
  make_app_parser(*%w(set set object key value)),
  make_app_parser(*%w(get get object key)),
  make_app_parser(*%w(size size object)),
  make_app_parser(*%w(if if condition consequence alternative)),
  make_app_parser(*%w(while while condition body)),
  make_app_parser(*%w(quote quote value)),
  make_app_parser(*%w(. getenv)),
  beginP
].choice

#{
grammar.rules[:expression] = [:atom, :application, :getvar, :quote].choice
#}

#{
grammar.rules[:sentence] << Rule::call(:expression)
#}

#{
grammar.rules[:expression].children << ["[]"].sequence { Repr::store({}) }
#}

#{
grammar.rules[:boolean] = "#t".to_rule.map { Repr::bool(true) } | "#f".to_rule.map { Repr::bool(false) }
grammar.rules[:expression].children << Rule::call(:boolean)
#}

(print eratosthenes)
(set (.) i 0)
(set (.) n 100)
(set (.) q 34)
(set (.) sieve [])

(while (< @i @n)
 (begin
   (set @sieve @i #t)
   (set (.) i (+ @i 1))))

(set @sieve 0 #f)
(set @sieve 1 #f)

(set (.) i 2)
(while (< @i @q)
 (begin
   (if (= (get @sieve @i) #t)
       (begin
         (set (.) a (* @i 2))
	 (while (< @a @n)
	  (begin
	   (set @sieve @a #f)
	   (set (.) a (+ @a @i)))))
       #f)
   (set (.) i (+ 1 @i))))

(set (.) i 0)
(while (< @i @n)
 (begin
   (if (get @sieve @i)
       (print @i)
       #f)
   (set (.) i (+ 1 @i))))

; (set (.) hoge 3)
; (print ''(get (.) hoge))
; (print (size (.)))
; 
; (set (.) i 0)
; (set (.) a 10)
; (while (/= (get (.) i) 10)
;  (begin
;   (set (.) a (+ @a @i))
;   (set (.) i (+ @i 1))))
; (print (get (.) a))
