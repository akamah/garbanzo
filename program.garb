# keyが，単なるsymbolを認識するように変更
tmp = {"@": "datastore", "object": {"@": "choice", "children": {}}}
tmp/children/string = parser/string
tmp/children/symbol = parser/symbol
parser/key = tmp

##### 主にデータストア関連の命令のラッパー関数
set = fun(obj, k, v)
  {@: "set", object: obj, key: k, value: v}
end

get = fun(obj, k)
  {@: "get", object: obj, key: k}
end

size = fun(obj)
  {@: "size", object: obj}
end

remove = fun(obj, k)
  {@: "remove", obect: obj, key: k}
end

exist = fun(obj, k)
  {@: "exist", object: obj, key: k}
end

getprevkey = fun(obj, orig)
  {@: "getprevkey", object: obj, origin: orig}
end

getnextkey = fun(obj, orig)
  {@: "getnextkey", object: obj, origin: orig}
end

firstkey = fun(obj)
  {@: "firstkey", object: obj}
end

lastkey = fun(obj)
  {@: "lastkey", object: obj}
end

isdatastore = fun(value)
  {@: "isdatastore", value: value}
end



# おなじみのprint関数
print = fun(message)
  {"@": "print", "value": message}
end

exprprec = fun(prec)
  {@: "precrule", table: ../parser/exprtab, prec: prec}
end

tokenize = fun(parser)
  blk = block
    %/parser/whitespaces;
    result = %$parser
    %/parser/whitespaces;
    result;
  end
  
  blk;
end

terminal = fun(string)
  blk = block
    {@: "terminal", string: $string}
  end
  blk;
end

a = 3
foo = block
  a = 2
  bar = block
    a = 1
    /print(a);
    /print($a);
    /print($$a);
  end
end

bar = block
  a = 6
  /print($a);
end

a = 4
# %%foo;

# %bar;


/parser/exprtab/andrule =
  {prec: 200,
   parser: block
     left = /exprprec(199)
     %/tokenize(/terminal("&&"));
     right = /exprprec(200)
     {@: "datastore", object: {@: "and", left: left, right: right}}
   end}


# print(isdatastore(1245));
# print(isdatastore("hoge"));
# print(isdatastore({}));

# print(true&& false);
# print(true&& true);

# whileのテスト
a = 1
while a<10
  print(a);
  a = a+1
end

# ifのテスト
if a<10
  print("a != 10");
else
  print("a == 10");
end

# 関数のテスト
hoge = fun()
  {@: "print", value: "abc"}
  {@: "print", value: "def"}
end

{@: "print", value: hoge()}


# fibonacci number
fib = fun(n)
  if n<2
    n;
  else
    ../fib(n-1)+../fib(n-2);
  end
end


{@: "print", value: fib(7)}


#funca = function(arguments)
#funca(argumentb)

#@@func(arg)(arg2)

#hoge.1
#3,0


#c = 30
#(list '+ 'b c 'd)

#=> (+ b 30 d)

#{@: datastore, object: {@: hoge, b: poyo, c: foo, d: bar} }

#=> {@: hoge, ... d: bar}