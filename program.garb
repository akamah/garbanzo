parser/unquote = block
  {"@": "terminal", "string": "%(" }
  expr = %parser/expression
  {"@": "terminal", "string": ")"  }

  {"@": "datastore", "object": {"@": "unquote", "value": expr }}
end

# ここで，symbolがunquoteも兼ねるようになった．
tmp = {"@": "datastore", "object": {"@": "choice", "children": {}}}
tmp/children/symbol = parser/symbol
parser/symbol = tmp
parser/symbol/children/unquote = parser/unquote

# keyが，単なるsymbolを認識するように変更
tmp = {"@": "datastore", "object": {"@": "choice", "children": {}}}
tmp/children/string = parser/string
tmp/children/symbol = parser/symbol
parser/key = tmp

{"@":"print", "value": 141421356}
{"@":"print", "value": 0}
{"@":"print", "value": true}
{"@":"print", "value": false}

# whileのテスト
a = 1
while a<10
  {@: "print", value: a}
  a = {@: "add", left: a, right: 1}
end

# ifのテスト
if a<10
  {@: "print", value: "a != 10"}
else
  {@: "print", value: "a == 10"}
end

# 関数のテスト
hoge = fun()
  {@: "print", value: "abc"}
  {@: "print", value: "def"}
end

{@: "print", value: hoge()}


# fibonacci number
fib = fun(n)
  if n<2
    n;
  else
    ../fib(n-1)+../fib(n-2);
  end
end


{@: "print", value: fib(7)}


#funca = function(arguments)
#funca(argumentb)

#@@func(arg)(arg2)

#hoge.1
#3,0


#c = 30
#(list '+ 'b c 'd)

#=> (+ b 30 d)

#{@: datastore, object: {@: hoge, b: poyo, c: foo, d: bar} }

#=> {@: hoge, ... d: bar}